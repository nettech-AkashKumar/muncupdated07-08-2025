// node_modules/jquery-slimscroll/jquery.slimscroll.js
(function($) {
  $.fn.extend({
    slimScroll: function(options) {
      var defaults = {
        // width in pixels of the visible scroll area
        width: "auto",
        // height in pixels of the visible scroll area
        height: "250px",
        // width in pixels of the scrollbar and rail
        size: "7px",
        // scrollbar color, accepts any hex/color value
        color: "#000",
        // scrollbar position - left/right
        position: "right",
        // distance in pixels between the side edge and the scrollbar
        distance: "1px",
        // default scroll position on load - top / bottom / $('selector')
        start: "top",
        // sets scrollbar opacity
        opacity: 0.4,
        // enables always-on mode for the scrollbar
        alwaysVisible: false,
        // check if we should hide the scrollbar when user is hovering over
        disableFadeOut: false,
        // sets visibility of the rail
        railVisible: false,
        // sets rail color
        railColor: "#333",
        // sets rail opacity
        railOpacity: 0.2,
        // whether  we should use jQuery UI Draggable to enable bar dragging
        railDraggable: true,
        // defautlt CSS class of the slimscroll rail
        railClass: "slimScrollRail",
        // defautlt CSS class of the slimscroll bar
        barClass: "slimScrollBar",
        // defautlt CSS class of the slimscroll wrapper
        wrapperClass: "slimScrollDiv",
        // check if mousewheel should scroll the window if we reach top/bottom
        allowPageScroll: false,
        // scroll amount applied to each mouse wheel step
        wheelStep: 20,
        // scroll amount applied when user is using gestures
        touchScrollStep: 200,
        // sets border radius
        borderRadius: "7px",
        // sets border radius of the rail
        railBorderRadius: "7px"
      };
      var o = $.extend(defaults, options);
      this.each(function() {
        var isOverPanel, isOverBar, isDragg, queueHide, touchDif, barHeight, percentScroll, lastScroll, divS = "<div></div>", minBarHeight = 30, releaseScroll = false;
        var me = $(this);
        if (me.parent().hasClass(o.wrapperClass)) {
          var offset = me.scrollTop();
          bar = me.siblings("." + o.barClass);
          rail = me.siblings("." + o.railClass);
          getBarHeight();
          if ($.isPlainObject(options)) {
            if ("height" in options && options.height == "auto") {
              me.parent().css("height", "auto");
              me.css("height", "auto");
              var height = me.parent().parent().height();
              me.parent().css("height", height);
              me.css("height", height);
            } else if ("height" in options) {
              var h = options.height;
              me.parent().css("height", h);
              me.css("height", h);
            }
            if ("scrollTo" in options) {
              offset = parseInt(o.scrollTo);
            } else if ("scrollBy" in options) {
              offset += parseInt(o.scrollBy);
            } else if ("destroy" in options) {
              bar.remove();
              rail.remove();
              me.unwrap();
              return;
            }
            scrollContent(offset, false, true);
          }
          return;
        } else if ($.isPlainObject(options)) {
          if ("destroy" in options) {
            return;
          }
        }
        o.height = o.height == "auto" ? me.parent().height() : o.height;
        var wrapper = $(divS).addClass(o.wrapperClass).css({
          position: "relative",
          overflow: "hidden",
          width: o.width,
          height: o.height
        });
        me.css({
          overflow: "hidden",
          width: o.width,
          height: o.height
        });
        var rail = $(divS).addClass(o.railClass).css({
          width: o.size,
          height: "100%",
          position: "absolute",
          top: 0,
          display: o.alwaysVisible && o.railVisible ? "block" : "none",
          "border-radius": o.railBorderRadius,
          background: o.railColor,
          opacity: o.railOpacity,
          zIndex: 90
        });
        var bar = $(divS).addClass(o.barClass).css({
          background: o.color,
          width: o.size,
          position: "absolute",
          top: 0,
          opacity: o.opacity,
          display: o.alwaysVisible ? "block" : "none",
          "border-radius": o.borderRadius,
          BorderRadius: o.borderRadius,
          MozBorderRadius: o.borderRadius,
          WebkitBorderRadius: o.borderRadius,
          zIndex: 99
        });
        var posCss = o.position == "right" ? { right: o.distance } : { left: o.distance };
        rail.css(posCss);
        bar.css(posCss);
        me.wrap(wrapper);
        me.parent().append(bar);
        me.parent().append(rail);
        if (o.railDraggable) {
          bar.bind("mousedown", function(e) {
            var $doc = $(document);
            isDragg = true;
            t = parseFloat(bar.css("top"));
            pageY = e.pageY;
            $doc.bind("mousemove.slimscroll", function(e2) {
              currTop = t + e2.pageY - pageY;
              bar.css("top", currTop);
              scrollContent(0, bar.position().top, false);
            });
            $doc.bind("mouseup.slimscroll", function(e2) {
              isDragg = false;
              hideBar();
              $doc.unbind(".slimscroll");
            });
            return false;
          }).bind("selectstart.slimscroll", function(e) {
            e.stopPropagation();
            e.preventDefault();
            return false;
          });
        }
        rail.hover(function() {
          showBar();
        }, function() {
          hideBar();
        });
        bar.hover(function() {
          isOverBar = true;
        }, function() {
          isOverBar = false;
        });
        me.hover(function() {
          isOverPanel = true;
          showBar();
          hideBar();
        }, function() {
          isOverPanel = false;
          hideBar();
        });
        me.bind("touchstart", function(e, b) {
          if (e.originalEvent.touches.length) {
            touchDif = e.originalEvent.touches[0].pageY;
          }
        });
        me.bind("touchmove", function(e) {
          if (!releaseScroll) {
            e.originalEvent.preventDefault();
          }
          if (e.originalEvent.touches.length) {
            var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
            scrollContent(diff, true);
            touchDif = e.originalEvent.touches[0].pageY;
          }
        });
        getBarHeight();
        if (o.start === "bottom") {
          bar.css({ top: me.outerHeight() - bar.outerHeight() });
          scrollContent(0, true);
        } else if (o.start !== "top") {
          scrollContent($(o.start).position().top, null, true);
          if (!o.alwaysVisible) {
            bar.hide();
          }
        }
        attachWheel(this);
        function _onWheel(e) {
          if (!isOverPanel) {
            return;
          }
          var e = e || window.event;
          var delta = 0;
          if (e.wheelDelta) {
            delta = -e.wheelDelta / 120;
          }
          if (e.detail) {
            delta = e.detail / 3;
          }
          var target = e.target || e.srcTarget || e.srcElement;
          if ($(target).closest("." + o.wrapperClass).is(me.parent())) {
            scrollContent(delta, true);
          }
          if (e.preventDefault && !releaseScroll) {
            e.preventDefault();
          }
          if (!releaseScroll) {
            e.returnValue = false;
          }
        }
        function scrollContent(y, isWheel, isJump) {
          releaseScroll = false;
          var delta = y;
          var maxTop = me.outerHeight() - bar.outerHeight();
          if (isWheel) {
            delta = parseInt(bar.css("top")) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();
            delta = Math.min(Math.max(delta, 0), maxTop);
            delta = y > 0 ? Math.ceil(delta) : Math.floor(delta);
            bar.css({ top: delta + "px" });
          }
          percentScroll = parseInt(bar.css("top")) / (me.outerHeight() - bar.outerHeight());
          delta = percentScroll * (me[0].scrollHeight - me.outerHeight());
          if (isJump) {
            delta = y;
            var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
            offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
            bar.css({ top: offsetTop + "px" });
          }
          me.scrollTop(delta);
          me.trigger("slimscrolling", ~~delta);
          showBar();
          hideBar();
        }
        function attachWheel(target) {
          if (window.addEventListener) {
            target.addEventListener("DOMMouseScroll", _onWheel, false);
            target.addEventListener("mousewheel", _onWheel, false);
          } else {
            document.attachEvent("onmousewheel", _onWheel);
          }
        }
        function getBarHeight() {
          barHeight = Math.max(me.outerHeight() / me[0].scrollHeight * me.outerHeight(), minBarHeight);
          bar.css({ height: barHeight + "px" });
          var display = barHeight == me.outerHeight() ? "none" : "block";
          bar.css({ display });
        }
        function showBar() {
          getBarHeight();
          clearTimeout(queueHide);
          if (percentScroll == ~~percentScroll) {
            releaseScroll = o.allowPageScroll;
            if (lastScroll != percentScroll) {
              var msg = ~~percentScroll == 0 ? "top" : "bottom";
              me.trigger("slimscroll", msg);
            }
          } else {
            releaseScroll = false;
          }
          lastScroll = percentScroll;
          if (barHeight >= me.outerHeight()) {
            releaseScroll = true;
            return;
          }
          bar.stop(true, true).fadeIn("fast");
          if (o.railVisible) {
            rail.stop(true, true).fadeIn("fast");
          }
        }
        function hideBar() {
          if (!o.alwaysVisible) {
            queueHide = setTimeout(function() {
              if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg) {
                bar.fadeOut("slow");
                rail.fadeOut("slow");
              }
            }, 1e3);
          }
        }
      });
      return this;
    }
  });
  $.fn.extend({
    slimscroll: $.fn.slimScroll
  });
})(jQuery);
/*! Bundled license information:

jquery-slimscroll/jquery.slimscroll.js:
  (*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
   * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
   * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
   *
   * Version: 1.3.8
   *
   *)
*/
//# sourceMappingURL=jquery-slimscroll.js.map
